
# Libraries and data ------------------------------------------------------

# install.packages(plyr) # Install this package for computing counts
library(tidyverse)
library(readxl)
library(geosphere)
library(zoo)
library(gplots)
library(plm) # Panel data analysis
library(car)
library(stargazer) # For latex tables
library(fastDummies) # Creating dummy variables
library(broom)
library(lmtest)
library(did) # Difference-in-difference
library(dplyr)

# Oil field data
discoveries <- read.csv("/Users/jeannelenguin/Desktop/EmpP/Datas/Discoveries.csv")

# How many countries in discoveries
plyr::count(discoveries$COUNTRY) # 80 countries

# Conflict data
conflicts <- read_excel("/Users/jeannelenguin/Desktop/EmpP/Datas/Conflicts.xlsx")

# How many countries in conflicts
plyr::count(conflicts$country) # 124 countries

gdp <- read.csv("/Users/jeannelenguin/Desktop/EmpP/Datas/gdp.csv")
pop <- read.csv("/Users/jeannelenguin/Desktop/EmpP/Datas/API_SP.POP.TOTL_DS2_en_csv_v2_79.csv", skip = 3)

####################################################################################################################################
###### Cleaning ####################################################################################################################
####################################################################################################################################

# Match country names in all the datasets
discoveries <- discoveries %>%
  mutate(COUNTRY = case_when(COUNTRY == "Sierre Leone" ~ "Sierra Leone", 
                             COUNTRY == "Equatorial Guinea" ~ "Guinea",
                             COUNTRY == "Congo (Brazzaville)" ~ "Congo",
                             COUNTRY == "Norway and United Kingdom" ~ "Norway",
                             COUNTRY == "Divided Neutral Zone: Kuwait/Saudi Arabia" ~ "Kuwait", # for simplicity
                             TRUE ~ COUNTRY))
conflicts <- conflicts %>% 
  mutate(country = case_when(country == "Russia (Soviet Union)" ~ "Russia",
                             country == "Myanmar (Burma)" ~ "Myanmar",
                             country == "Yemen (North Yemen)" ~ "Yemen",
                             country == "United States of America" ~ "United States",
                             country == "DR Congo (Zaire)" ~ "Congo",
                             country == "Guinea-Bissau" ~ "Guinea",
                             country == "United Arab Emirates" ~ "UAE",
                             TRUE ~ country))

pop <- subset(pop, select = -c(2:33, X))
pop <- pop  %>% rename("country" = "Country.Name")
pop <- pop %>% 
  mutate(country = case_when(country == "Cambodia" ~ "Cambodia (Kampuchea)",
                             country == "Russian Federation" ~ "Russia",
                             country == "Zimbabwe" ~ "Zimbabwe (Rhodesia)",
                             country == "Turkiye" ~ "Turkey",
                             country == "Congo, Dem. Rep." ~ "Congo",
                             country == "Venezuela, RB" ~ "Venezuela",
                             country == "Lao PDR" ~ "Laos",
                             country == "Egypt, Arab Rep." ~ "Egypt",
                             country == "Cote d'Ivoire" ~ "Ivory Coast",
                             country == "Iran, Islamic Rep." ~ "Iran",
                             country == "Serbia" ~ "Serbia (Yugoslavia)",
                             country == "Bosnia and Herzegovina" ~ "Bosnia-Herzegovina",
                             country == "Yemen, Rep." ~ "Yemen",
                             country == "Gambia, The" ~ "Gambia",
                             country == "North Macedonia" ~ "Macedonia, FYR",
                             country == "Madagascar" ~ "Madagascar (Malagasy)",
                             country == "Syrian Arab Republic" ~ "Syria",
                             country == "Eswatini" ~ "Kingdom of eSwatini (Swaziland)",
                             country == "United Arab Emirates" ~ "UAE",
                             country == "Brunei Darussalam" ~ "Brunei",
                             country == "Viet Nam" ~ "Vietnam",
                             country == "Kyrgyz Republic" ~ "Kyrgyzstan",
                             T ~ country))
pop <- pop %>%
  pivot_longer(-country)
pop <- pop %>% rename("year" = "name",
                    "pop" = "value")
pop <- pop %>% 
  mutate(year = as.numeric(gsub("X", "", year)))

gdp <- gdp %>% 
  rename("country" = "Country.or.Area",
         "year" = "Year",
         "gdp" = "Value")
gdp <- gdp %>% 
  mutate(country = case_when(country == "Russian Federation" ~ "Russia",
                             country == "United Republic of Tanzania: Mainland" ~ "Tanzania",
                             country == "United Republic of Tanzania: Zanzibar" ~ "Tanzania",
                             country == "Côte d'Ivoire" ~ "Ivory Coast",
                             country == "Venezuela (Bolivarian Republic of)" ~ "Venezuela",
                             country == "Republic of North Macedonia" ~ "Macedonia, FYR",
                             country == "United Kingdom of Great Britain and Northern Ireland" ~ "United Kingdom",
                             country == "China (mainland)" ~ "China",
                             country == "Bolivia (Plurinational State of)" ~ "Bolivia",
                             country == "Syrian Arab Republic" ~ "Syria",
                             country == "Lao People's Democratic Republic" ~ "Laos",
                             country == "Türkiye" ~ "Turkey",
                             country == "Bosnia and Herzegovina" ~ "Bosnia-Herzegovina",
                             country == "Republic of Moldova" ~ "Moldova",
                             country == "Iran, Islamic Republic of" ~ "Iran",
                             country == "Brunei Darussalam" ~ "Brunei",
                             country == "Viet Nam" ~ "Vietnam",
                             country == "United Arab Emirates" ~ "UAE",
                             country == "Cambodia" ~ "Cambodia (Kampuchea)",
                             country == "Kingdom of Eswatini" ~ "Kingdom of eSwatini (Swaziland)",
                             country == "Madagascar" ~ "Madagascar (Malagasy)",
                             country == "Serbia" ~ "Serbia (Yugoslavia)",
                             country == "Zimbabwe" ~ "Zimbabwe (Rhodesia)",
                             T ~ country))


meangdp <- gdp %>% 
  group_by(country)%>%
  summarise(gdp = mean(gdp))

# Country_year variable 
discoveries <- discoveries %>%
  mutate(country_year = paste(COUNTRY, year))

pop <- pop %>%
  mutate(country_year = paste(country, year))
gdp <- gdp %>%
  mutate(country_year = paste(country, year))


####################################################################################################################################
###### Construction of the dataset #################################################################################################
####################################################################################################################################

# Conflict uniq
conflictsuniq <- conflicts %>%
  mutate(country_year = paste(country, year))

conflictsuniq <- subset(conflictsuniq, select=c("country_year","country","year","date_start","type_of_violence","conflict_new_id","best"))

conflictsuniq <- conflictsuniq %>% 
  group_by(country_year)%>%
  mutate(number_of_conflicts = length(unique(conflict_new_id)))%>%
  mutate(total_fatalities=sum(best))%>%
  mutate(number_of_events = n())

conflictsuniq <- conflictsuniq %>% 
  arrange(date_start) %>%
  group_by(country_year,conflict_new_id) %>%
  slice(1)

conflictsuniq <- conflictsuniq %>% 
  group_by(country_year)%>%
  mutate(number_of_new_conflicts = n())


#Final database : 

data <- expand.grid(year = seq(1989, 2022, 1), 
                           country = unique(c(conflicts$country, discoveries$COUNTRY)))

# Conflict dummy
data$conflict_dummy <- 0
data <- data %>% 
  mutate(country_year = paste(country, year), .after = country)
data <- data %>% 
  mutate(conflict_dummy = case_when(country_year %in% conflictsuniq$country_year ~ 1, T ~ 0))

# Discovery dummy
data$discovery_dummy <- 0

data <- data %>% 
  mutate(discovery_dummy = case_when(country_year %in% discoveries$country_year ~ 1, T ~ 0))

data <- left_join(data, subset(conflictsuniq, select = c("country_year", "number_of_conflicts","number_of_events","number_of_new_conflicts","total_fatalities")), by = "country_year")

data <- data %>% 
  distinct()
data <- data %>% 
  mutate(number_of_conflicts = case_when(is.na(number_of_conflicts) ~ 0, 
                                                 T ~ number_of_conflicts),
         total_fatalities = case_when(is.na(total_fatalities) ~ 0,
                                      T ~ total_fatalities),
         number_of_new_conflicts = case_when(is.na(number_of_new_conflicts) ~ 0,
                                      T ~ number_of_new_conflicts),
         number_of_events = case_when(is.na(number_of_events) ~ 0,
                                             T ~ number_of_events))


data <- left_join(data, subset(pop, select = c("country_year", "pop")), by = "country_year")

data <- left_join(data, subset(meangdp, select = c("country", "gdp")), by = "country")

setdiff(conflicts$country,meangdp$country)

data <- subset(data, select = -c(country_year))
data <- data %>% relocate(year, .after = country)
data$country <- as.numeric(as.factor(data$country))


data <- data %>%
  group_by(country) %>% 
  mutate(period = row_number() - which(discovery_dummy == 1)[1],
         .after = discovery_dummy)

data <- data %>% 
  group_by(country) %>%
  mutate(first_discovery = `year`[period == 0],
         .after = discovery_dummy)
data <- data %>% 
  mutate(first_discovery = case_when(is.na(first_discovery) ~ 0, T ~ first_discovery))

data <- data %>% 
  mutate(fatalitiespop = total_fatalities/pop*100000)



# Event study -------------------------------------------------------------

## Number of conflicts started ----

# Group-time average treatment effects
out <- att_gt(yname = "number_of_conflicts",
              gname = "first_discovery",
              idname = "country",
              tname = "year",
              xformla = ~ 1,
              data = data,
              est_method = "reg",
              allow_unbalanced_panel = T)
# ggdid(out) # Too many groups to see anything

# Aggregate group-time average treatment effects (dynamic event study)
es <- aggte(out, type = "dynamic", na.rm = T)
# summary(es)

# Overall average treatment effect
summary(aggte(out, type = "group"))

# Event study plot
ggdid(es) +
  ggtitle("Average Effect on No. of Conflicts Started (All Conflict Types)") +
  theme_classic(base_size = 12) +
  geom_segment(aes(x = 0, y = -4, xend = 0, yend = 3), lty = 2, col = "black")


## Total fatalities ----

# Group-time average treatment effects
out <- att_gt(yname = "total_fatalities",
              gname = "first_discovery",
              idname = "country",
              tname = "year",
              xformla = ~ 1,
              data = data,
              est_method = "reg",
              allow_unbalanced_panel = T)

# Aggregate group-time average treatment effects (dynamic event study)
es <- aggte(out, type = "dynamic", na.rm = T)

# Overall average treatment effect
summary(aggte(out, type = "group"))

# Event study plot
ggdid(es) +
  ggtitle("Average Effect on Total No. of Fatalities") +
  theme_classic(base_size = 12)




# RICH / POOR COUNTRIES -------------------------------------------------------------


# Rich 
datarich <- subset(data, gdp >= median(data$gdp))

## Number of conflicts ----

# Group-time average treatment effects
out <- att_gt(yname = "number_of_conflicts",
              gname = "first_discovery",
              idname = "country",
              tname = "year",
              xformla = ~ 1,
              data = datarich,
              est_method = "reg",
              allow_unbalanced_panel = T)
# ggdid(out) # Too many groups to see anything

# Aggregate group-time average treatment effects (dynamic event study)
es <- aggte(out, type = "dynamic", na.rm = T)
# summary(es)

# Overall average treatment effect
summary(aggte(out, type = "group"))

# Event study plot
ggdid(es) +
  ggtitle("Average Effect on No. of Conflicts Started  ") +
  theme_classic(base_size = 12) +
  geom_segment(aes(x = 0, y = -4, xend = 0, yend = 3), lty = 2, col = "black")

## Number of conflicts started ----

# Group-time average treatment effects
out <- att_gt(yname = "number_of_new_conflicts",
              gname = "first_discovery",
              idname = "country",
              tname = "year",
              xformla = ~ 1,
              data = datarich,
              est_method = "reg",
              allow_unbalanced_panel = T)
# ggdid(out) # Too many groups to see anything

# Aggregate group-time average treatment effects (dynamic event study)
es <- aggte(out, type = "dynamic", na.rm = T)
# summary(es)

# Overall average treatment effect
summary(aggte(out, type = "group"))

# Event study plot
ggdid(es) +
  ggtitle("Average Effect on No. of Conflicts Started  ") +
  theme_classic(base_size = 12) +
  geom_segment(aes(x = 0, y = -4, xend = 0, yend = 3), lty = 2, col = "black")


## Total fatalities ----

# Group-time average treatment effects
out <- att_gt(yname = "fatalitiespop",
              gname = "first_discovery",
              idname = "country",
              tname = "year",
              xformla = ~ 1,
              data = datarich,
              est_method = "reg",
              allow_unbalanced_panel = T)

# Aggregate group-time average treatment effects (dynamic event study)
es <- aggte(out, type = "dynamic", na.rm = T)

# Overall average treatment effect
summary(aggte(out, type = "group"))

# Event study plot
ggdid(es) +
  ggtitle("Average Effect on Total No. of Fatalities (scale by pop)") +
  theme_classic(base_size = 12)

# Poor 
datapoor <- subset(data, gdp < (data$gdp))

## Number of conflicts ----

# Group-time average treatment effects
out <- att_gt(yname = "number_of_conflicts",
              gname = "first_discovery",
              idname = "country",
              tname = "year",
              xformla = ~ 1,
              data = datapoor,
              est_method = "reg",
              allow_unbalanced_panel = T)
# ggdid(out) # Too many groups to see anything

# Aggregate group-time average treatment effects (dynamic event study)
es <- aggte(out, type = "dynamic", na.rm = T)
# summary(es)

# Overall average treatment effect
summary(aggte(out, type = "group"))

# Event study plot
ggdid(es) +
  ggtitle("Average Effect on No. of Conflicts (All Conflict Types)") +
  theme_classic(base_size = 12) +
  geom_segment(aes(x = 0, y = -4, xend = 0, yend = 3), lty = 2, col = "black")

## Number of conflicts started ----

# Group-time average treatment effects
out <- att_gt(yname = "number_of_new_conflicts",
              gname = "first_discovery",
              idname = "country",
              tname = "year",
              xformla = ~ 1,
              data = datarich,
              est_method = "reg",
              allow_unbalanced_panel = T)
# ggdid(out) # Too many groups to see anything

# Aggregate group-time average treatment effects (dynamic event study)
es <- aggte(out, type = "dynamic", na.rm = T)
# summary(es)

# Overall average treatment effect
summary(aggte(out, type = "group"))

# Event study plot
ggdid(es) +
  ggtitle("Average Effect on No. of Conflicts Started  ") +
  theme_classic(base_size = 12) +
  geom_segment(aes(x = 0, y = -4, xend = 0, yend = 3), lty = 2, col = "black")

## Total fatalities ----

# Group-time average treatment effects
out <- att_gt(yname = "fatalitiespop",
              gname = "first_discovery",
              idname = "country",
              tname = "year",
              xformla = ~ 1,
              data = datapoor,
              est_method = "reg",
              allow_unbalanced_panel = T)


# Aggregate group-time average treatment effects (dynamic event study)
es <- aggte(out, type = "dynamic", na.rm = T)

# Overall average treatment effect
summary(aggte(out, type = "group"))

# Event study plot
ggdid(es) +
  ggtitle("Average Effect on Total No. of Fatalities (scale by pop)") +
  theme_classic(base_size = 12)






